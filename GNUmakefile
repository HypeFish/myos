# This is the name that our final executable will have.
override OUTPUT := myos

# Set the toolchain prefix
TOOLCHAIN_PREFIX ?= x86_64-elf-
CC := $(TOOLCHAIN_PREFIX)gcc
LD := $(TOOLCHAIN_PREFIX)ld

# --- Compiler and Linker Flags ---
override CFLAGS += \
	-Wall \
	-Wextra \
	-std=gnu11 \
	-ffreestanding \
	-fno-stack-protector \
	-fno-stack-check \
	-fno-lto \
	-fno-PIC \
	-ffunction-sections \
	-fdata-sections \
	-m64 \
	-march=x86-64 \
	-mabi=sysv \
	-mno-red-zone \
	-mcmodel=kernel \
	-g

override CPPFLAGS += \
	-I src \
	-DLIMINE_API_REVISION=3 \
	-MMD \
	-MP

override LDFLAGS += \
	-m elf_x86_64 \
	-nostdlib \
	-static \
	-z max-page-size=0x1000 \
	--gc-sections \
	-T linker.lds

# --- Find Source Files ---
# --- Find all source files (C and Assembly) ---
CFILES := $(shell find -L src -type f -name '*.c' 2>/dev/null | LC_ALL=C sort)
ASFILES := $(shell find -L src -type f -name '*.S' 2>/dev/null | LC_ALL=C sort)

COBJ := $(patsubst src/%.c, obj/%.o, $(CFILES))
ASOBJ := $(patsubst src/%.S, obj/%.o, $(ASFILES))
OBJ := $(COBJ) $(ASOBJ)
HEADER_DEPS := $(patsubst src/%.c, obj/%.d, $(CFILES))
# --- Build Rules ---

# Default target
.PHONY: all
all: bin/$(OUTPUT)

# Include header dependencies generated by the compiler
-include $(HEADER_DEPS)

# Link rule for the final kernel executable
bin/$(OUTPUT): linker.lds $(OBJ)
	mkdir -p "$(dir $@)"
	$(LD) $(LDFLAGS) $(OBJ) -o $@

# Compilation rule for .c files
obj/%.o: src/%.c GNUmakefile
	mkdir -p "$(dir $@)"
	$(CC) $(CFLAGS) $(CPPFLAGS) -c $< -o $@

# NEW: Compilation rule for .S (Assembly) files
obj/%.o: src/%.S GNUmakefile
	@mkdir -p "$(dir $@)"
	$(CC) $(CFLAGS) $(CPPFLAGS) -c $< -o $@

# Rule to clean the project directory
.PHONY: clean
clean:
	rm -rf bin obj *.iso iso_root limine

# Rule to build the ISO image
.PHONY: image.iso
image.iso: all limine.cfg limine
	@echo "Building ISO image..."
	rm -rf iso_root
	mkdir -p iso_root
	cp bin/$(OUTPUT) iso_root/kernel.elf
	cp limine.cfg limine/limine-bios.sys \
	    limine/limine-bios-cd.bin iso_root/
	xorriso -as mkisofs -b limine-bios-cd.bin \
	    -no-emul-boot -boot-load-size 4 -boot-info-table \
	    iso_root -o image.iso
	./limine/limine bios-install image.iso
	rm -rf iso_root

# Rule to run QEMU
.PHONY: run
run: image.iso
	qemu-system-x86_64 -cdrom image.iso \
	-no-reboot -no-shutdown \
	-serial stdio